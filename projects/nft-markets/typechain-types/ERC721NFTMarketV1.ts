/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ERC721NFTMarketV1 {
  export type AskStruct = {
    seller: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type AskStructOutput = [string, BigNumber] & {
    seller: string;
    price: BigNumber;
  };

  export type CollectionStruct = {
    status: PromiseOrValue<BigNumberish>;
    creatorAddress: PromiseOrValue<string>;
    whitelistChecker: PromiseOrValue<string>;
    tradingFee: PromiseOrValue<BigNumberish>;
    creatorFee: PromiseOrValue<BigNumberish>;
  };

  export type CollectionStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    status: number;
    creatorAddress: string;
    whitelistChecker: string;
    tradingFee: BigNumber;
    creatorFee: BigNumber;
  };
}

export interface ERC721NFTMarketV1Interface extends utils.Interface {
  functions: {
    "TOTAL_MAX_FEE()": FunctionFragment;
    "WGANG()": FunctionFragment;
    "addCollection(address,address,address,uint256,uint256)": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "buyTokenUsingBNB(address,uint256)": FunctionFragment;
    "buyTokenUsingWGANG(address,uint256,uint256)": FunctionFragment;
    "calculatePriceAndFeesForCollection(address,uint256)": FunctionFragment;
    "canTokensBeListed(address,uint256[])": FunctionFragment;
    "cancelAskOrder(address,uint256)": FunctionFragment;
    "claimPendingRevenue()": FunctionFragment;
    "closeCollectionForTradingAndListing(address)": FunctionFragment;
    "createAskOrder(address,uint256,uint256)": FunctionFragment;
    "maximumAskPrice()": FunctionFragment;
    "minimumAskPrice()": FunctionFragment;
    "modifyAskOrder(address,uint256,uint256)": FunctionFragment;
    "modifyCollection(address,address,address,uint256,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRevenue(address)": FunctionFragment;
    "recoverFungibleTokens(address)": FunctionFragment;
    "recoverNonFungibleToken(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminAndTreasuryAddresses(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "updateMinimumAndMaximumPrices(uint256,uint256)": FunctionFragment;
    "viewAsksByCollection(address,uint256,uint256)": FunctionFragment;
    "viewAsksByCollectionAndSeller(address,address,uint256,uint256)": FunctionFragment;
    "viewAsksByCollectionAndTokenIds(address,uint256[])": FunctionFragment;
    "viewCollections(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TOTAL_MAX_FEE"
      | "WGANG"
      | "addCollection"
      | "adminAddress"
      | "buyTokenUsingBNB"
      | "buyTokenUsingWGANG"
      | "calculatePriceAndFeesForCollection"
      | "canTokensBeListed"
      | "cancelAskOrder"
      | "claimPendingRevenue"
      | "closeCollectionForTradingAndListing"
      | "createAskOrder"
      | "maximumAskPrice"
      | "minimumAskPrice"
      | "modifyAskOrder"
      | "modifyCollection"
      | "onERC721Received"
      | "owner"
      | "pendingRevenue"
      | "recoverFungibleTokens"
      | "recoverNonFungibleToken"
      | "renounceOwnership"
      | "setAdminAndTreasuryAddresses"
      | "transferOwnership"
      | "treasuryAddress"
      | "updateMinimumAndMaximumPrices"
      | "viewAsksByCollection"
      | "viewAsksByCollectionAndSeller"
      | "viewAsksByCollectionAndTokenIds"
      | "viewCollections"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TOTAL_MAX_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WGANG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenUsingBNB",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenUsingWGANG",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePriceAndFeesForCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canTokensBeListed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAskOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPendingRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeCollectionForTradingAndListing",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAskOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumAskPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAskPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyAskOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRevenue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFungibleTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverNonFungibleToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminAndTreasuryAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumAndMaximumPrices",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAsksByCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAsksByCollectionAndSeller",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAsksByCollectionAndTokenIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCollections",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOTAL_MAX_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WGANG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenUsingBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenUsingWGANG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePriceAndFeesForCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTokensBeListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAskOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPendingRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeCollectionForTradingAndListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAskOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumAskPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumAskPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyAskOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFungibleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverNonFungibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminAndTreasuryAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumAndMaximumPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAsksByCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAsksByCollectionAndSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAsksByCollectionAndTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCollections",
    data: BytesLike
  ): Result;

  events: {
    "AskCancel(address,address,uint256)": EventFragment;
    "AskNew(address,address,uint256,uint256)": EventFragment;
    "AskUpdate(address,address,uint256,uint256)": EventFragment;
    "CollectionClose(address)": EventFragment;
    "CollectionNew(address,address,address,uint256,uint256)": EventFragment;
    "CollectionUpdate(address,address,address,uint256,uint256)": EventFragment;
    "NewAdminAndTreasuryAddresses(address,address)": EventFragment;
    "NewMinimumAndMaximumAskPrices(uint256,uint256)": EventFragment;
    "NonFungibleTokenRecovery(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevenueClaim(address,uint256)": EventFragment;
    "TokenRecovery(address,uint256)": EventFragment;
    "Trade(address,uint256,address,address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AskCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AskNew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AskUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionNew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionUpdate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewAdminAndTreasuryAddresses"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewMinimumAndMaximumAskPrices"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonFungibleTokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export interface AskCancelEventObject {
  collection: string;
  seller: string;
  tokenId: BigNumber;
}
export type AskCancelEvent = TypedEvent<
  [string, string, BigNumber],
  AskCancelEventObject
>;

export type AskCancelEventFilter = TypedEventFilter<AskCancelEvent>;

export interface AskNewEventObject {
  collection: string;
  seller: string;
  tokenId: BigNumber;
  askPrice: BigNumber;
}
export type AskNewEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AskNewEventObject
>;

export type AskNewEventFilter = TypedEventFilter<AskNewEvent>;

export interface AskUpdateEventObject {
  collection: string;
  seller: string;
  tokenId: BigNumber;
  askPrice: BigNumber;
}
export type AskUpdateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AskUpdateEventObject
>;

export type AskUpdateEventFilter = TypedEventFilter<AskUpdateEvent>;

export interface CollectionCloseEventObject {
  collection: string;
}
export type CollectionCloseEvent = TypedEvent<
  [string],
  CollectionCloseEventObject
>;

export type CollectionCloseEventFilter = TypedEventFilter<CollectionCloseEvent>;

export interface CollectionNewEventObject {
  collection: string;
  creator: string;
  whitelistChecker: string;
  tradingFee: BigNumber;
  creatorFee: BigNumber;
}
export type CollectionNewEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  CollectionNewEventObject
>;

export type CollectionNewEventFilter = TypedEventFilter<CollectionNewEvent>;

export interface CollectionUpdateEventObject {
  collection: string;
  creator: string;
  whitelistChecker: string;
  tradingFee: BigNumber;
  creatorFee: BigNumber;
}
export type CollectionUpdateEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  CollectionUpdateEventObject
>;

export type CollectionUpdateEventFilter =
  TypedEventFilter<CollectionUpdateEvent>;

export interface NewAdminAndTreasuryAddressesEventObject {
  admin: string;
  treasury: string;
}
export type NewAdminAndTreasuryAddressesEvent = TypedEvent<
  [string, string],
  NewAdminAndTreasuryAddressesEventObject
>;

export type NewAdminAndTreasuryAddressesEventFilter =
  TypedEventFilter<NewAdminAndTreasuryAddressesEvent>;

export interface NewMinimumAndMaximumAskPricesEventObject {
  minimumAskPrice: BigNumber;
  maximumAskPrice: BigNumber;
}
export type NewMinimumAndMaximumAskPricesEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewMinimumAndMaximumAskPricesEventObject
>;

export type NewMinimumAndMaximumAskPricesEventFilter =
  TypedEventFilter<NewMinimumAndMaximumAskPricesEvent>;

export interface NonFungibleTokenRecoveryEventObject {
  token: string;
  tokenId: BigNumber;
}
export type NonFungibleTokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  NonFungibleTokenRecoveryEventObject
>;

export type NonFungibleTokenRecoveryEventFilter =
  TypedEventFilter<NonFungibleTokenRecoveryEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RevenueClaimEventObject {
  claimer: string;
  amount: BigNumber;
}
export type RevenueClaimEvent = TypedEvent<
  [string, BigNumber],
  RevenueClaimEventObject
>;

export type RevenueClaimEventFilter = TypedEventFilter<RevenueClaimEvent>;

export interface TokenRecoveryEventObject {
  token: string;
  amount: BigNumber;
}
export type TokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  TokenRecoveryEventObject
>;

export type TokenRecoveryEventFilter = TypedEventFilter<TokenRecoveryEvent>;

export interface TradeEventObject {
  collection: string;
  tokenId: BigNumber;
  seller: string;
  buyer: string;
  askPrice: BigNumber;
  netPrice: BigNumber;
  withBNB: boolean;
}
export type TradeEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, boolean],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface ERC721NFTMarketV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721NFTMarketV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WGANG(overrides?: CallOverrides): Promise<[string]>;

    addCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    buyTokenUsingBNB(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenUsingWGANG(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculatePriceAndFeesForCollection(
      collection: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netPrice: BigNumber;
        tradingFee: BigNumber;
        creatorFee: BigNumber;
      }
    >;

    canTokensBeListed(
      _collection: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { listingStatuses: boolean[] }>;

    cancelAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPendingRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeCollectionForTradingAndListing(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _askPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maximumAskPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumAskPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    modifyAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    recoverFungibleTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminAndTreasuryAddresses(
      _adminAddress: PromiseOrValue<string>,
      _treasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: PromiseOrValue<BigNumberish>,
      _maximumAskPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewAsksByCollection(
      collection: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], ERC721NFTMarketV1.AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: ERC721NFTMarketV1.AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndSeller(
      collection: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], ERC721NFTMarketV1.AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: ERC721NFTMarketV1.AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndTokenIds(
      collection: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [boolean[], ERC721NFTMarketV1.AskStructOutput[]] & {
        statuses: boolean[];
        askInfo: ERC721NFTMarketV1.AskStructOutput[];
      }
    >;

    viewCollections(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], ERC721NFTMarketV1.CollectionStructOutput[], BigNumber] & {
        collectionAddresses: string[];
        collectionDetails: ERC721NFTMarketV1.CollectionStructOutput[];
      }
    >;
  };

  TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  WGANG(overrides?: CallOverrides): Promise<string>;

  addCollection(
    _collection: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _whitelistChecker: PromiseOrValue<string>,
    _tradingFee: PromiseOrValue<BigNumberish>,
    _creatorFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  buyTokenUsingBNB(
    _collection: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenUsingWGANG(
    _collection: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculatePriceAndFeesForCollection(
    collection: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      netPrice: BigNumber;
      tradingFee: BigNumber;
      creatorFee: BigNumber;
    }
  >;

  canTokensBeListed(
    _collection: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  cancelAskOrder(
    _collection: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPendingRevenue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeCollectionForTradingAndListing(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAskOrder(
    _collection: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _askPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maximumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

  minimumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

  modifyAskOrder(
    _collection: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyCollection(
    _collection: PromiseOrValue<string>,
    _creator: PromiseOrValue<string>,
    _whitelistChecker: PromiseOrValue<string>,
    _tradingFee: PromiseOrValue<BigNumberish>,
    _creatorFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRevenue(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recoverFungibleTokens(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverNonFungibleToken(
    _token: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminAndTreasuryAddresses(
    _adminAddress: PromiseOrValue<string>,
    _treasuryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  updateMinimumAndMaximumPrices(
    _minimumAskPrice: PromiseOrValue<BigNumberish>,
    _maximumAskPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewAsksByCollection(
    collection: PromiseOrValue<string>,
    cursor: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], ERC721NFTMarketV1.AskStructOutput[], BigNumber] & {
      tokenIds: BigNumber[];
      askInfo: ERC721NFTMarketV1.AskStructOutput[];
    }
  >;

  viewAsksByCollectionAndSeller(
    collection: PromiseOrValue<string>,
    seller: PromiseOrValue<string>,
    cursor: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], ERC721NFTMarketV1.AskStructOutput[], BigNumber] & {
      tokenIds: BigNumber[];
      askInfo: ERC721NFTMarketV1.AskStructOutput[];
    }
  >;

  viewAsksByCollectionAndTokenIds(
    collection: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [boolean[], ERC721NFTMarketV1.AskStructOutput[]] & {
      statuses: boolean[];
      askInfo: ERC721NFTMarketV1.AskStructOutput[];
    }
  >;

  viewCollections(
    cursor: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], ERC721NFTMarketV1.CollectionStructOutput[], BigNumber] & {
      collectionAddresses: string[];
      collectionDetails: ERC721NFTMarketV1.CollectionStructOutput[];
    }
  >;

  callStatic: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    WGANG(overrides?: CallOverrides): Promise<string>;

    addCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    buyTokenUsingBNB(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenUsingWGANG(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculatePriceAndFeesForCollection(
      collection: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netPrice: BigNumber;
        tradingFee: BigNumber;
        creatorFee: BigNumber;
      }
    >;

    canTokensBeListed(
      _collection: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    cancelAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPendingRevenue(overrides?: CallOverrides): Promise<void>;

    closeCollectionForTradingAndListing(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _askPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    modifyAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFungibleTokens(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminAndTreasuryAddresses(
      _adminAddress: PromiseOrValue<string>,
      _treasuryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: PromiseOrValue<BigNumberish>,
      _maximumAskPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    viewAsksByCollection(
      collection: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], ERC721NFTMarketV1.AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: ERC721NFTMarketV1.AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndSeller(
      collection: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], ERC721NFTMarketV1.AskStructOutput[], BigNumber] & {
        tokenIds: BigNumber[];
        askInfo: ERC721NFTMarketV1.AskStructOutput[];
      }
    >;

    viewAsksByCollectionAndTokenIds(
      collection: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [boolean[], ERC721NFTMarketV1.AskStructOutput[]] & {
        statuses: boolean[];
        askInfo: ERC721NFTMarketV1.AskStructOutput[];
      }
    >;

    viewCollections(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], ERC721NFTMarketV1.CollectionStructOutput[], BigNumber] & {
        collectionAddresses: string[];
        collectionDetails: ERC721NFTMarketV1.CollectionStructOutput[];
      }
    >;
  };

  filters: {
    "AskCancel(address,address,uint256)"(
      collection?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AskCancelEventFilter;
    AskCancel(
      collection?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AskCancelEventFilter;

    "AskNew(address,address,uint256,uint256)"(
      collection?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      askPrice?: null
    ): AskNewEventFilter;
    AskNew(
      collection?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      askPrice?: null
    ): AskNewEventFilter;

    "AskUpdate(address,address,uint256,uint256)"(
      collection?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      askPrice?: null
    ): AskUpdateEventFilter;
    AskUpdate(
      collection?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      askPrice?: null
    ): AskUpdateEventFilter;

    "CollectionClose(address)"(
      collection?: PromiseOrValue<string> | null
    ): CollectionCloseEventFilter;
    CollectionClose(
      collection?: PromiseOrValue<string> | null
    ): CollectionCloseEventFilter;

    "CollectionNew(address,address,address,uint256,uint256)"(
      collection?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      whitelistChecker?: PromiseOrValue<string> | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionNewEventFilter;
    CollectionNew(
      collection?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      whitelistChecker?: PromiseOrValue<string> | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionNewEventFilter;

    "CollectionUpdate(address,address,address,uint256,uint256)"(
      collection?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      whitelistChecker?: PromiseOrValue<string> | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionUpdateEventFilter;
    CollectionUpdate(
      collection?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      whitelistChecker?: PromiseOrValue<string> | null,
      tradingFee?: null,
      creatorFee?: null
    ): CollectionUpdateEventFilter;

    "NewAdminAndTreasuryAddresses(address,address)"(
      admin?: PromiseOrValue<string> | null,
      treasury?: PromiseOrValue<string> | null
    ): NewAdminAndTreasuryAddressesEventFilter;
    NewAdminAndTreasuryAddresses(
      admin?: PromiseOrValue<string> | null,
      treasury?: PromiseOrValue<string> | null
    ): NewAdminAndTreasuryAddressesEventFilter;

    "NewMinimumAndMaximumAskPrices(uint256,uint256)"(
      minimumAskPrice?: null,
      maximumAskPrice?: null
    ): NewMinimumAndMaximumAskPricesEventFilter;
    NewMinimumAndMaximumAskPrices(
      minimumAskPrice?: null,
      maximumAskPrice?: null
    ): NewMinimumAndMaximumAskPricesEventFilter;

    "NonFungibleTokenRecovery(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NonFungibleTokenRecoveryEventFilter;
    NonFungibleTokenRecovery(
      token?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NonFungibleTokenRecoveryEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RevenueClaim(address,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): RevenueClaimEventFilter;
    RevenueClaim(
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): RevenueClaimEventFilter;

    "TokenRecovery(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenRecoveryEventFilter;
    TokenRecovery(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenRecoveryEventFilter;

    "Trade(address,uint256,address,address,uint256,uint256,bool)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: null,
      askPrice?: null,
      netPrice?: null,
      withBNB?: null
    ): TradeEventFilter;
    Trade(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: null,
      askPrice?: null,
      netPrice?: null,
      withBNB?: null
    ): TradeEventFilter;
  };

  estimateGas: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    WGANG(overrides?: CallOverrides): Promise<BigNumber>;

    addCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokenUsingBNB(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenUsingWGANG(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculatePriceAndFeesForCollection(
      collection: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTokensBeListed(
      _collection: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPendingRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeCollectionForTradingAndListing(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _askPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maximumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAskPrice(overrides?: CallOverrides): Promise<BigNumber>;

    modifyAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFungibleTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminAndTreasuryAddresses(
      _adminAddress: PromiseOrValue<string>,
      _treasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: PromiseOrValue<BigNumberish>,
      _maximumAskPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewAsksByCollection(
      collection: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewAsksByCollectionAndSeller(
      collection: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewAsksByCollectionAndTokenIds(
      collection: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCollections(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOTAL_MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WGANG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTokenUsingBNB(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenUsingWGANG(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculatePriceAndFeesForCollection(
      collection: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTokensBeListed(
      _collection: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPendingRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeCollectionForTradingAndListing(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _askPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maximumAskPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumAskPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyAskOrder(
      _collection: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyCollection(
      _collection: PromiseOrValue<string>,
      _creator: PromiseOrValue<string>,
      _whitelistChecker: PromiseOrValue<string>,
      _tradingFee: PromiseOrValue<BigNumberish>,
      _creatorFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRevenue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverFungibleTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverNonFungibleToken(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminAndTreasuryAddresses(
      _adminAddress: PromiseOrValue<string>,
      _treasuryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMinimumAndMaximumPrices(
      _minimumAskPrice: PromiseOrValue<BigNumberish>,
      _maximumAskPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewAsksByCollection(
      collection: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewAsksByCollectionAndSeller(
      collection: PromiseOrValue<string>,
      seller: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewAsksByCollectionAndTokenIds(
      collection: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewCollections(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
