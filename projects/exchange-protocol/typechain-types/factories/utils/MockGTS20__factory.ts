/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MockGTS20, MockGTS20Interface } from "../../utils/MockGTS20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620010c3380380620010c38339810160408190526200003491620002a7565b8251839083906200004d9060029060208501906200014e565b508051620000639060039060208401906200014e565b50506004805460ff19166012179055506200007f338262000088565b5050506200038f565b6001600160a01b038216620000e35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060056000828254620000f7919062000317565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b8280546200015c906200033c565b90600052602060002090601f016020900481019282620001805760008555620001cb565b82601f106200019b57805160ff1916838001178555620001cb565b82800160010185558215620001cb579182015b82811115620001cb578251825591602001919060010190620001ae565b50620001d9929150620001dd565b5090565b5b80821115620001d95760008155600101620001de565b600082601f83011262000205578081fd5b81516001600160401b038082111562000222576200022262000379565b604051601f8301601f19908116603f011681019082821181831017156200024d576200024d62000379565b8160405283815260209250868385880101111562000269578485fd5b8491505b838210156200028c57858201830151818301840152908201906200026d565b838211156200029d57848385830101525b9695505050505050565b600080600060608486031215620002bc578283fd5b83516001600160401b0380821115620002d3578485fd5b620002e187838801620001f4565b94506020860151915080821115620002f7578384fd5b506200030686828701620001f4565b925050604084015190509250925092565b600082198211156200033757634e487b7160e01b81526011600452602481fd5b500190565b600181811c908216806200035157607f821691505b602082108114156200037357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610d24806200039f6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636ebcf6071161008c57806397304ced1161006657806397304ced146101d0578063a457c2d7146101e5578063a9059cbb146101f8578063dd62ed3e1461020b57600080fd5b80636ebcf6071461017257806370a082311461019257806395d89b41146101c857600080fd5b806323b872dd116100bd57806323b872dd14610137578063313ce5671461014a578063395093511461015f57600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610251565b6040516100f99190610bcb565b60405180910390f35b610115610110366004610b8a565b6102e3565b60405190151581526020016100f9565b6005545b6040519081526020016100f9565b610115610145366004610b4f565b6102f9565b60045460405160ff90911681526020016100f9565b61011561016d366004610b8a565b610415565b610129610180366004610afc565b60006020819052908152604090205481565b6101296101a0366004610afc565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100ec61045e565b6101e36101de366004610bb3565b61046d565b005b6101156101f3366004610b8a565b61047a565b610115610206366004610b8a565b610586565b610129610219366004610b1d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606002805461026090610c6b565b80601f016020809104026020016040519081016040528092919081815260200182805461028c90610c6b565b80156102d95780601f106102ae576101008083540402835291602001916102d9565b820191906000526020600020905b8154815290600101906020018083116102bc57829003601f168201915b5050505050905090565b60006102f0338484610593565b50600192915050565b6000610306848484610747565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602090815260408083203384529091529020548211156103cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f47545332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602090815260408083203380855292529091205461040b918691859003610593565b5060019392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916102f0918590610459908690610c3c565b610593565b60606003805461026090610c6b565b61047733826109e0565b50565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205481906104b8908490610c54565b1015610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f47545332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103c2565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091529020546102f091908590859003610593565b60006102f0338484610747565b73ffffffffffffffffffffffffffffffffffffffff8316610635576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f47545332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103c2565b73ffffffffffffffffffffffffffffffffffffffff82166106d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f47545332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103c2565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166107ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f47545332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103c2565b73ffffffffffffffffffffffffffffffffffffffff821661088d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f47545332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103c2565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902054811115610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f47545332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103c2565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152602081905260408082208054859003905591841681522054610982908290610c3c565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161073a565b73ffffffffffffffffffffffffffffffffffffffff8216610a5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103c2565b8060056000828254610a6f9190610c3c565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610af757600080fd5b919050565b600060208284031215610b0d578081fd5b610b1682610ad3565b9392505050565b60008060408385031215610b2f578081fd5b610b3883610ad3565b9150610b4660208401610ad3565b90509250929050565b600080600060608486031215610b63578081fd5b610b6c84610ad3565b9250610b7a60208501610ad3565b9150604084013590509250925092565b60008060408385031215610b9c578182fd5b610ba583610ad3565b946020939093013593505050565b600060208284031215610bc4578081fd5b5035919050565b6000602080835283518082850152825b81811015610bf757858101830151858201604001528201610bdb565b81811115610c085783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610c4f57610c4f610cbf565b500190565b600082821015610c6657610c66610cbf565b500390565b600181811c90821680610c7f57607f821691505b60208210811415610cb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220966299e45af9936715bef323423f48d8ae7bf0c3610acb5c9921efb88b62428a64736f6c63430008040033";

type MockGTS20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGTS20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGTS20__factory extends ContractFactory {
  constructor(...args: MockGTS20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockGTS20> {
    return super.deploy(
      name,
      symbol,
      supply,
      overrides || {}
    ) as Promise<MockGTS20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, supply, overrides || {});
  }
  override attach(address: string): MockGTS20 {
    return super.attach(address) as MockGTS20;
  }
  override connect(signer: Signer): MockGTS20__factory {
    return super.connect(signer) as MockGTS20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGTS20Interface {
    return new utils.Interface(_abi) as MockGTS20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockGTS20 {
    return new Contract(address, _abi, signerOrProvider) as MockGTS20;
  }
}
