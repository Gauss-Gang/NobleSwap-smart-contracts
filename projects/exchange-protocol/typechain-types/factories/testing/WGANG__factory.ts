/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { WGANG, WGANGInterface } from "../../testing/WGANG";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "guy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600c81526020017f577261707065642047414e470000000000000000000000000000000000000000815250600290816200004a91906200033c565b506040518060400160405280600581526020017f7747414e47000000000000000000000000000000000000000000000000000000815250600390816200009191906200033c565b506012600460006101000a81548160ff021916908360ff160217905550348015620000bb57600080fd5b5062000423565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200014457607f821691505b6020821081036200015a5762000159620000fc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001c47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000185565b620001d0868362000185565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200021d620002176200021184620001e8565b620001f2565b620001e8565b9050919050565b6000819050919050565b6200023983620001fc565b62000251620002488262000224565b84845462000192565b825550505050565b600090565b6200026862000259565b620002758184846200022e565b505050565b5b818110156200029d57620002916000826200025e565b6001810190506200027b565b5050565b601f821115620002ec57620002b68162000160565b620002c18462000175565b81016020851015620002d1578190505b620002e9620002e08562000175565b8301826200027a565b50505b505050565b600082821c905092915050565b60006200031160001984600802620002f1565b1980831691505092915050565b60006200032c8383620002fe565b9150826002028217905092915050565b6200034782620000c2565b67ffffffffffffffff811115620003635762000362620000cd565b5b6200036f82546200012b565b6200037c828285620002a1565b600060209050601f831160018114620003b457600084156200039f578287015190505b620003ab85826200031e565b8655506200041b565b601f198416620003c48662000160565b60005b82811015620003ee57848901518255600182019150602085019450602081019050620003c7565b868310156200040e57848901516200040a601f891682620002fe565b8355505b6001600288020188555050505b505050505050565b61156d80620004336000396000f3fe6080604052600436106100c05760003560e01c8063313ce56711610074578063a9059cbb1161004e578063a9059cbb14610274578063d0e30db0146102b1578063dd62ed3e146102bb576100e3565b8063313ce567146101e157806370a082311461020c57806395d89b4114610249576100e3565b806318160ddd116100a557806318160ddd1461015057806323b872dd1461017b5780632e1a7d4d146101b8576100e3565b806306fdde03146100e8578063095ea7b314610113576100e3565b366100e3576100d96773605c5c565a9dd760c01b6102f8565b6100e16102fb565b005b600080fd5b3480156100f457600080fd5b506100fd6103f0565b60405161010a919061109d565b60405180910390f35b34801561011f57600080fd5b5061013a60048036038101906101359190611158565b61047e565b60405161014791906111b3565b60405180910390f35b34801561015c57600080fd5b506101656104f9565b60405161017291906111dd565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d91906111f8565b61053d565b6040516101af91906111b3565b60405180910390f35b3480156101c457600080fd5b506101df60048036038101906101da919061124b565b610b2b565b005b3480156101ed57600080fd5b506101f6610da3565b6040516102039190611294565b60405180910390f35b34801561021857600080fd5b50610233600480360381019061022e91906112af565b610db6565b60405161024091906111dd565b60405180910390f35b34801561025557600080fd5b5061025e610dce565b60405161026b919061109d565b60405180910390f35b34801561028057600080fd5b5061029b60048036038101906102969190611158565b610e5c565b6040516102a891906111b3565b60405180910390f35b6102b96102fb565b005b3480156102c757600080fd5b506102e260048036038101906102dd91906112dc565b610ead565b6040516102ef91906111dd565b60405180910390f35b50565b61030f67a323adb1482ad77b60c01b6102f8565b610323673c6efc32e1d709e360c01b6102f8565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610371919061134b565b9250508190555061038c6714ff6948b66cc8fc60c01b6102f8565b6103a0674d31fd4aa052f8cd60c01b6102f8565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040516103e691906111dd565b60405180910390a2565b600280546103fd906113ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610429906113ae565b80156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b505050505081565b600061049467fcb15c0cc36ab19860c01b6102f8565b6104a8676df7a1c53f470c3660c01b6102f8565b6104bc679a8b42a46ec50a8760c01b6102f8565b6104c7338484610ed2565b6104db67f2c96cb59c3c873d60c01b6102f8565b6104ef6711fbb32e6032a05f60c01b6102f8565b6001905092915050565b600061050f6798fabc2dde4734b760c01b6102f8565b61052367cc85ce3e3f3013b460c01b6102f8565b6105376728c50591d84db03660c01b6102f8565b47905090565b6000610553674d6e438aca01999160c01b6102f8565b610567672779a7fcef7f4b0960c01b6102f8565b61057b671683ec90edbe4f5260c01b6102f8565b61058f67e8e5e9c3045ce00e60c01b6102f8565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790611451565b60405180910390fd5b61062467789c110c8d14396760c01b6102f8565b61063867b3c12e60907599a460c01b6102f8565b61064c67cadf511f35b5a9a760c01b6102f8565b610660673a99c39edbab012f60c01b6102f8565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561071f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610716906114e3565b60405180910390fd5b61073367f3b49b3bc3856ef660c01b6102f8565b6107476765b41f3bd62e514460c01b6102f8565b61075b678ca161368487dc2060c01b6102f8565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561083357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1561090b5761084c6783753ba0d6b72d3c60c01b6102f8565b6108606754085871adec828e60c01b6102f8565b610874671d2b20198b506a7960c01b6102f8565b610906843384600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109019190611503565b610ed2565b610920565b61091f67f2292dd5e46dcc7a60c01b6102f8565b5b61093467d088ed3c2d0b8f0c60c01b6102f8565b61094867eeddcec03a6751f860c01b6102f8565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109df67b1cfbd4f8225959f60c01b6102f8565b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a29919061134b565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a7f675776acd24650f05660c01b6102f8565b610a9367a748f9868a7610c160c01b6102f8565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610af091906111dd565b60405180910390a3610b0c67e3dce8472a070c9960c01b6102f8565b610b20677cd1f6ba8f36dba460c01b6102f8565b600190509392505050565b610b3f67f59f87e594bab12060c01b6102f8565b610b536741370bbeb9e043ea60c01b6102f8565b610b67670a3312e8c60b33de60c01b6102f8565b610b7b67c64fe399969f8c6b60c01b6102f8565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf390611451565b60405180910390fd5b610c106730240cb1bccd6e5760c01b6102f8565b610c2467684c02662473b9fe60c01b6102f8565b610c3867c7a2ab3526c8152d60c01b6102f8565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ccf6721276f14d17d227260c01b6102f8565b610ce3673e0326808501e6e360c01b6102f8565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d29573d6000803e3d6000fd5b50610d3e6794bfa5a6d9a9a83c60c01b6102f8565b610d52676ecddf66dc28c26460c01b6102f8565b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6582604051610d9891906111dd565b60405180910390a250565b600460009054906101000a900460ff1681565b60006020528060005260406000206000915090505481565b60038054610ddb906113ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610e07906113ae565b8015610e545780601f10610e2957610100808354040283529160200191610e54565b820191906000526020600020905b815481529060010190602001808311610e3757829003601f168201915b505050505081565b6000610e726759993668fb0bfb4260c01b6102f8565b610e866738885972fe70c86a60c01b6102f8565b610e9a67e30312861a80840760c01b6102f8565b610ea533848461053d565b905092915050565b6001602052816000526040600020602052806000526040600020600091509150505481565b610ee66705f5fce90b52fc9b60c01b6102f8565b610efa67d454c719a667bead60c01b6102f8565b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f8f67e0a8170d8972ec3a60c01b6102f8565b610fa36705c0329f2ebd099560c01b6102f8565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161100091906111dd565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561104757808201518184015260208101905061102c565b60008484015250505050565b6000601f19601f8301169050919050565b600061106f8261100d565b6110798185611018565b9350611089818560208601611029565b61109281611053565b840191505092915050565b600060208201905081810360008301526110b78184611064565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ef826110c4565b9050919050565b6110ff816110e4565b811461110a57600080fd5b50565b60008135905061111c816110f6565b92915050565b6000819050919050565b61113581611122565b811461114057600080fd5b50565b6000813590506111528161112c565b92915050565b6000806040838503121561116f5761116e6110bf565b5b600061117d8582860161110d565b925050602061118e85828601611143565b9150509250929050565b60008115159050919050565b6111ad81611198565b82525050565b60006020820190506111c860008301846111a4565b92915050565b6111d781611122565b82525050565b60006020820190506111f260008301846111ce565b92915050565b600080600060608486031215611211576112106110bf565b5b600061121f8682870161110d565b93505060206112308682870161110d565b925050604061124186828701611143565b9150509250925092565b600060208284031215611261576112606110bf565b5b600061126f84828501611143565b91505092915050565b600060ff82169050919050565b61128e81611278565b82525050565b60006020820190506112a96000830184611285565b92915050565b6000602082840312156112c5576112c46110bf565b5b60006112d38482850161110d565b91505092915050565b600080604083850312156112f3576112f26110bf565b5b60006113018582860161110d565b92505060206113128582860161110d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135682611122565b915061136183611122565b92508282019050808211156113795761137861131c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113c657607f821691505b6020821081036113d9576113d861137f565b5b50919050565b7f47545332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061143b602683611018565b9150611446826113df565b604082019050919050565b6000602082019050818103600083015261146a8161142e565b9050919050565b7f47545332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006114cd602883611018565b91506114d882611471565b604082019050919050565b600060208201905081810360008301526114fc816114c0565b9050919050565b600061150e82611122565b915061151983611122565b92508282039050818111156115315761153061131c565b5b9291505056fea2646970667358221220f519ef3e2fff20280f5c5edd0f8fc26ae4b03aa78e14dc7e1caca2270c14c29e64736f6c63430008110033";

type WGANGConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WGANGConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WGANG__factory extends ContractFactory {
  constructor(...args: WGANGConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WGANG> {
    return super.deploy(overrides || {}) as Promise<WGANG>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WGANG {
    return super.attach(address) as WGANG;
  }
  override connect(signer: Signer): WGANG__factory {
    return super.connect(signer) as WGANG__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WGANGInterface {
    return new utils.Interface(_abi) as WGANGInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): WGANG {
    return new Contract(address, _abi, signerOrProvider) as WGANG;
  }
}
