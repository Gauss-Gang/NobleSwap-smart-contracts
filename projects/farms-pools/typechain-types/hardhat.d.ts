/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "GangStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GangStaking__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "GTS20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GTS20__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: "IGTS20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGTS20__factory>;
    getContractFactory(
      name: "IWGANG",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWGANG__factory>;
    getContractFactory(
      name: "CoinFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoinFactory__factory>;
    getContractFactory(
      name: "MockGTS20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockGTS20__factory>;
    getContractFactory(
      name: "MockGTS20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockGTS20__factory>;
    getContractFactory(
      name: "WBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WBNB__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "NobleBar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NobleBar__factory>;
    getContractFactory(
      name: "NobleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NobleToken__factory>;
    getContractFactory(
      name: "WGANG",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WGANG__factory>;

    getContractAt(
      name: "GangStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GangStaking>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "GTS20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GTS20>;
    getContractAt(
      name: "Timelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: "IGTS20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGTS20>;
    getContractAt(
      name: "IWGANG",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWGANG>;
    getContractAt(
      name: "CoinFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoinFactory>;
    getContractAt(
      name: "MockGTS20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockGTS20>;
    getContractAt(
      name: "MockGTS20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockGTS20>;
    getContractAt(
      name: "WBNB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WBNB>;
    getContractAt(
      name: "IMigratorChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "NobleBar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NobleBar>;
    getContractAt(
      name: "NobleToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NobleToken>;
    getContractAt(
      name: "WGANG",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WGANG>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
